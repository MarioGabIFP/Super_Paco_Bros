package view;

import static org.lwjgl.glfw.GLFW.GLFW_FALSE;
import static org.lwjgl.glfw.GLFW.GLFW_KEY_ESCAPE;
import static org.lwjgl.glfw.GLFW.GLFW_RELEASE;
import static org.lwjgl.glfw.GLFW.GLFW_RESIZABLE;
import static org.lwjgl.glfw.GLFW.GLFW_SCALE_TO_MONITOR;
import static org.lwjgl.glfw.GLFW.GLFW_TRUE;
import static org.lwjgl.glfw.GLFW.GLFW_VISIBLE;
import static org.lwjgl.glfw.GLFW.glfwCreateWindow;
import static org.lwjgl.glfw.GLFW.glfwGetPrimaryMonitor;
import static org.lwjgl.glfw.GLFW.glfwGetVideoMode;
import static org.lwjgl.glfw.GLFW.glfwGetWindowSize;
import static org.lwjgl.glfw.GLFW.glfwInit;
import static org.lwjgl.glfw.GLFW.glfwMakeContextCurrent;
import static org.lwjgl.glfw.GLFW.glfwSetKeyCallback;
import static org.lwjgl.glfw.GLFW.glfwSetWindowPos;
import static org.lwjgl.glfw.GLFW.glfwSetWindowShouldClose;
import static org.lwjgl.glfw.GLFW.glfwShowWindow;
import static org.lwjgl.glfw.GLFW.glfwSwapInterval;
import static org.lwjgl.glfw.GLFW.glfwWindowHint;
import static org.lwjgl.system.MemoryStack.stackPush;
import static org.lwjgl.system.MemoryUtil.NULL;

import java.nio.IntBuffer;

import org.lwjgl.glfw.GLFWErrorCallback;
import org.lwjgl.glfw.GLFWVidMode;
import org.lwjgl.system.MemoryStack;

/**
 * <strong>Carga y control de Graficos</strong>.
 * 
 * @author Mario Gabriel Núñez Alcázar de Velasco
 */
public class Graphics {
	
	/**
	 * Constructor de graficos
	 */
	Graphics() {
		/*
		 * Establecemos el modo de retorno en los errores.
		 * De esta manera predefinimos el modo de impresión de los errores.
		 */
		GLFWErrorCallback.createPrint(System.err).set();

		// Inicializamos el controlador de graficos. muchas funciones del API solo funcionarán tras ejecutar esta función.
		if ( !glfwInit() ) throw new IllegalStateException("Imposible iniciar el controlador de graficos.");
		
		// Establecemos los parametros básicos del controlador de graficos
		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // La ventana permanecerá visible tras su creación.
		glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // La ventana podrá ser redimensionada.
		glfwWindowHint(GLFW_SCALE_TO_MONITOR, GLFW_TRUE); // hacemos la ventana escalable al monitor

		// Creamos la ventana
		window = glfwCreateWindow(1920, 1080, "Super Paco Bros", glfwGetPrimaryMonitor(), NULL);
		
		/*
		 * si la ventana no ha podido ser creada, 'window' será null, en ese caso lanzamos un error.
		 */
		if ( window == NULL ) throw new RuntimeException("Imposible realizar la carga de los gráficos");

		/*
		 * Configura la captura del teclado
		 * Se llamará cada vez que se presione, repita o suelte una tecla.
		 */
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			/******************************************************
			 * Aquí configuraremos los controles del Juego.********
			 ******************************************************/
			// Si pulsamos la tecla ESC (Escape), se cerrará la ventana.
			if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE ) glfwSetWindowShouldClose(window, true);
		});

		// Obtiene la lista de Frames en tiempo real y lanza uno nuevo
		try ( MemoryStack stack = stackPush() ) {
			IntBuffer pWidth = stack.mallocInt(1);
			IntBuffer pHeight = stack.mallocInt(1);

			// Obtiene el tamaño de la pantalla
			glfwGetWindowSize(window, pWidth, pHeight);

			// Obtiene la resolucion de la pantalla principal
			GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());

			// Centra la vista de los graficos en la ventana
			glfwSetWindowPos(
				window,
				(vidmode.width() - pWidth.get(0)) / 2,
				(vidmode.height() - pHeight.get(0)) / 2
			);
		} // los Frames se mostrarán autómaticamente segun serán creados

		// Establece la ventana actual
		glfwMakeContextCurrent(window);
		
		// Activamos v-sync
		glfwSwapInterval(1);

		// hace la ventana visible.
		glfwShowWindow(window);
	}
}
