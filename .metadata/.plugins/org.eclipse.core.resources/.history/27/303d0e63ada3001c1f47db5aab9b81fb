/**
 * Recursos externos utilizados:
 * <br>
 * <ul>
 * <li><strong>LWJGL</strong>: Lightweight Java Game Library</li>
 * <li><strong>LWJGL OpenGL</strong>: Renderizador de graficos de LWJGL basado en OpenGL</li>
 * <li><strogn>LWJGL GLFW</strong>: Controlador de graficos de LWJGL basado en OpenGL</li>
 * </ul>
 * 
 * Documentación:
 * <br>
 * <ul>
 * <li><a href="https://javadoc.lwjgl.org"><strong>LWJGL</strong></a></li>
 * </ul>
 */
package controller;

import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;

import view.Graphics;

import java.nio.*;
import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryStack.*;
import static org.lwjgl.system.MemoryUtil.*;

public class Motor extends Graphics{
	/**
	 * <strong>Main</strong>.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		new Motor().run(); // Ejecuta el juego.
	}

	/**
	 * <strong>Lanzador</strong>.
	 * 
	 * <br><br>Lanza la ejecución del Juego.
	 */
	public void run() {
		init(); // iniciamos el entorno grafico
		loop(); // Ejecutamos el juego

		// Liberamos el retorno de la ventana y destruimos la instancia de la misma
		glfwFreeCallbacks(window);
		glfwDestroyWindow(window);

		// Terminamos la ejecución del controlador de gráficos y liberamos el retorno de los errores.  
		glfwTerminate();
		glfwSetErrorCallback(null).free();
	}

	/**
	 * <strong>Ejecución del Juego</strong>.
	 */
	private void loop() {
		/*
		 * Cargamos la libreria de OpenGL
		 * 
		 * Este paso es esencial para la correcta ejecución del juego
		 */
		GL.createCapabilities();

		/*
		 * Cargamos los graficos especificos del juego
		 */
		/****************************************************************************************************
		 * aqui es donde cargamos los elementos visibles del juego, personaje, mapa, enemigos, bloques etc.** 
		 ****************************************************************************************************/
		// Graficos por defecto; pantalla en rojo
		glClearColor(1.0f, 0.0f, 0.0f, 0.0f);

		/*
		 * Ejecutamos el bucle de renderizado de graficos hasta que el usuario decida cerrar el juego
		 */ 
		while ( !glfwWindowShouldClose(window) ) {// Mientras que el usuario no intente cerrar la ventana 
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // limpiamos el Buffer de Frames

			glfwSwapBuffers(window); // intercambia el Buffer de colores

			// Sondea los eventos de la venatana.
			glfwPollEvents();
		}
	}
}