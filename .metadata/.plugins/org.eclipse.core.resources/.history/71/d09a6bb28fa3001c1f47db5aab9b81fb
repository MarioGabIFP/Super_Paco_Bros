/**
 * Recursos externos utilizados:
 * <br>
 * <ul>
 * <li><strong>LWJGL</strong>: Lightweight Java Game Library</li>
 * <li><strong>LWJGL OpenGL</strong>: Renderizador de graficos de LWJGL basado en OpenGL</li>
 * <li><strogn>LWJGL GLFW</strong>: Controlador de graficos de LWJGL basado en OpenGL</li>
 * </ul>
 * 
 * Documentación:
 * <br>
 * <ul>
 * <li><a href="https://javadoc.lwjgl.org"><strong>LWJGL</strong></a></li>
 * </ul>
 */
package controller;

import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;
import java.nio.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryStack.*;
import static org.lwjgl.system.MemoryUtil.*;

public class PacoMotor {
	/**
	 * <strong>Ventana</strong>.
	 * 
	 * <br><br>Representa la ventana que está siendo ejecutada.
	 */
	private long window;

	/**
	 * <strong>Lanzador</strong>.
	 * 
	 * <br><br>Lanza la ejecución del Juego.
	 */
	public void run() {
		init(); // iniciamos el entorno grafico
		loop(); // Ejecutamos el juego

		// Liberamos el retorno de la ventana y destruimos la instancia de la misma
		glfwFreeCallbacks(window);
		glfwDestroyWindow(window);

		// Terminamos la ejecución del controlador de gráficos y liberamos el retorno de los errores.  
		glfwTerminate();
		glfwSetErrorCallback(null).free();
	}

	/**
	 * <strong>Cargador de Graficos</strong>.
	 * 
	 * <br><br>Carga el entorno gráfico.
	 */
	private void init() {
		//Obtenemos las dimensiones de la pantalla
		Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();
		
		/*
		 * Establecemos el modo de retorno en los errores.
		 * De esta manera predefinimos el modo de impresión de los errores.
		 */
		GLFWErrorCallback.createPrint(System.err).set();

		// Inicializamos el controlador de graficos. muchas funciones del API solo funcionarán tras ejecutar esta función.
		if ( !glfwInit() ) throw new IllegalStateException("Imposible iniciar el controlador de graficos.");
		
		// Establecemos los parametros básicos del controlador de graficos
		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // La ventana permanecerá visible tras su creación.
		glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // La ventana podrá ser redimensionada.
		glfwWindowHint(GLFW_SCALE_TO_MONITOR, GLFW_TRUE); // La ventana podrá ser redimensionada.

		// Creamos la ventana
		window = glfwCreateWindow(screenDim.width, screenDim.height, "Super Paco Bros", glfwGetPrimaryMonitor(), NULL);
		
		if ( window == NULL ) throw new RuntimeException("Failed to create the GLFW window");

		// Setup a key callback. It will be called every time a key is pressed, repeated or released.
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE )
				glfwSetWindowShouldClose(window, true); // We will detect this in the rendering loop
		});

		// Get the thread stack and push a new frame
		try ( MemoryStack stack = stackPush() ) {
			IntBuffer pWidth = stack.mallocInt(1); // int *
			IntBuffer pHeight = stack.mallocInt(1); // int *

			// Get the window size passed to glfwCreateWindow
			glfwGetWindowSize(window, pWidth, pHeight);

			// Get the resolution of the primary monitor
			GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());

			// Center the window
			glfwSetWindowPos(
				window,
				(vidmode.width() - pWidth.get(0)) / 2,
				(vidmode.height() - pHeight.get(0)) / 2
			);
		} // the stack frame is popped automatically

		// Make the OpenGL context current
		glfwMakeContextCurrent(window);
		// Enable v-sync
		glfwSwapInterval(1);

		// Make the window visible
		glfwShowWindow(window);
	}

	/**
	 * <strong>Ejecución del Juego</strong>.
	 */
	private void loop() {
		// This line is critical for LWJGL's interoperation with GLFW's
		// OpenGL context, or any context that is managed externally.
		// LWJGL detects the context that is current in the current thread,
		// creates the GLCapabilities instance and makes the OpenGL
		// bindings available for use.
		GL.createCapabilities();

		// Set the clear color
		glClearColor(1.0f, 0.0f, 0.0f, 0.0f);

		// Run the rendering loop until the user has attempted to close
		// the window or has pressed the ESCAPE key.
		while ( !glfwWindowShouldClose(window) ) {
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer

			glfwSwapBuffers(window); // swap the color buffers

			// Poll for window events. The key callback above will only be
			// invoked during this call.
			glfwPollEvents();
		}
	}

	/**
	 * <strong>Main</strong>.
	 * @param args
	 */
	public static void main(String[] args) {
		nglfwGetMonitorPhysicalSize(glfwGetPrimaryMonitor(), 0, 0);
		new PacoMotor().run();
	}

}