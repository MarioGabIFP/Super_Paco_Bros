/**
 * Recursos externos utilizados:
 * <br>
 * <ul>
 * <li><strong>LWJGL</strong>: Lightweight Java Game Library</li>
 * <li><strong>LWJGL OpenGL</strong>: Renderizador de graficos de LWJGL basado en OpenGL</li>
 * <li><strogn>LWJGL GLFW</strong>: Controlador de graficos de LWJGL basado en OpenGL</li>
 * </ul>
 * 
 * Documentación:
 * <br>
 * <ul>
 * <li><a href="https://javadoc.lwjgl.org"><strong>LWJGL</strong></a></li>
 * </ul>
 */
package controller;

import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;
import java.nio.*;
import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryStack.*;
import static org.lwjgl.system.MemoryUtil.*;

public class PacoMotor {
	/**
	 * <strong>Ventana</strong>.
	 * 
	 * <br><br>Representa la ventana que está siendo ejecutada.
	 */
	private long window;

	/**
	 * <strong>Lanzador</strong>.
	 * 
	 * <br><br>Lanza la ejecución del Juego.
	 */
	public void run() {
		init(); // iniciamos el entorno grafico
		loop(); // Ejecutamos el juego

		// Liberamos el retorno de la ventana y destruimos la instancia de la misma
		glfwFreeCallbacks(window);
		glfwDestroyWindow(window);

		// Terminamos la ejecución del controlador de gráficos y liberamos el retorno de los errores.  
		glfwTerminate();
		glfwSetErrorCallback(null).free();
	}

	/**
	 * <strong>Cargador de Graficos</strong>.
	 * 
	 * <br><br>Carga el entorno gráfico.
	 */
	private void init() {
		/*
		 * Establecemos el modo de retorno en los errores.
		 * De esta manera predefinimos el modo de impresión de los errores.
		 */
		GLFWErrorCallback.createPrint(System.err).set();

		// Inicializamos el controlador de graficos. muchas funciones del API solo funcionarán tras ejecutar esta función.
		if ( !glfwInit() ) throw new IllegalStateException("Imposible iniciar el controlador de graficos.");
		
		// Establecemos los parametros básicos del controlador de graficos
		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // La ventana permanecerá visible tras su creación.
		glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // La ventana podrá ser redimensionada.
		glfwWindowHint(GLFW_SCALE_TO_MONITOR, GLFW_TRUE); // hacemos la ventana escalable al monitor

		// Creamos la ventana
		window = glfwCreateWindow(1920, 1080, "Super Paco Bros", glfwGetPrimaryMonitor(), NULL);
		
		/*
		 * si la ventana no ha podido ser creada, 'window' será null, en ese caso lanzamos un error.
		 */
		if ( window == NULL ) throw new RuntimeException("Imposible realizar la carga de los gráficos");

		/*
		 * Configura la captura del teclado
		 * Se llamará cada vez que se presione, repita o suelte una tecla.
		 */
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			/******************************************************
			 * Aquí configuraremos los controles del Juego.********
			 ******************************************************/
			// Si pulsamos la tecla ESC (Escape), se cerrará la ventana.
			if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE ) glfwSetWindowShouldClose(window, true);
		});

		// Obtiene la lista de Frames en tiempo real y lanza uno nuevo
		try ( MemoryStack stack = stackPush() ) {
			IntBuffer pWidth = stack.mallocInt(1);
			IntBuffer pHeight = stack.mallocInt(1);

			// Obtiene el tamaño de la pantalla
			glfwGetWindowSize(window, pWidth, pHeight);

			// Obtiene la resolucion de la pantalla principal
			GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());

			// Centra la vista de los graficos en la ventana
			glfwSetWindowPos(
				window,
				(vidmode.width() - pWidth.get(0)) / 2,
				(vidmode.height() - pHeight.get(0)) / 2
			);
		} // los Frames se mostrarán autómaticamente segun serán creados

		// Establece la ventana actual
		glfwMakeContextCurrent(window);
		
		// Activamos v-sync
		glfwSwapInterval(1);

		// hace la ventana visible.
		glfwShowWindow(window);
	}

	/**
	 * <strong>Ejecución del Juego</strong>.
	 */
	private void loop() {
		/*
		 * Cargamos la libreria de OpenGL
		 * 
		 * Este paso es esencial para la correcta ejecución del juego
		 */
		GL.createCapabilities();

		/*
		 * Cargamos los graficos especificos del juego
		 */
		/****************************************************************************************************
		 * aqui es donde cargamos los elementos visibles del juego, personaje, mapa, enemigos, bloques etc.** 
		 ****************************************************************************************************/
		// Graficos por defecto; pantalla en rojo
		glClearColor(1.0f, 0.0f, 0.0f, 0.0f);

		/*
		 * Ejecutamos el bucle de renderizado de graficos hasta que el usuario decida cerrar el juego
		 */ 
		while ( !glfwWindowShouldClose(window) ) {// Mientras que el usuario no intente cerrar la ventana 
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // limpiamos el Buffer de Frames

			glfwSwapBuffers(window); // intercambia el Buffer de colores

			// Sondea los eventos de la venatana.
			glfwPollEvents();
		}
	}

	/**
	 * <strong>Main</strong>.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		new PacoMotor().run(); // Ejecuta el juego.
	}

}